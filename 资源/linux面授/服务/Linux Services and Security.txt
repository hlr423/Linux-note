

http:

	C/S:
		C: client
			socket,
		S: server
			listen, socket

		通信协议：MAC, IP, PORT
		应用协议：dns, http(html)

	Socket:
		IP:PORT <--> IP:PORT

	http：

		http： 超文本传输协议
			html：hypertext mark language

			C/S:
				C: browsers, User agents
				S：httpd, nginx


		http/0.9：原型版本
		http/1.0：cache, MIME
			MIME: multipurpose internet mail extensions
				SMTP：simple mail transmission protocol
					MIME类型：
						major/minor:
							images/jpeg, images/png, images/gif
							text/plain, text/html, ...

		http/1.1：
			cache, 条件式请求等；

			speedy: spdy
		http/2.0：

		https协议：
			http over ssl/tls

		IANA:
			0-1023：众所周知，永久地分配给固定的应用程序使用，特权端口（仅root有权限使用）；
			1024-41951：注册端口，但要求略宽松，分配给某程序注册使用；
			41952+：客户端程序使用的随机端口，动态端口，或称为私有端口；
				/proc/sys/net/ipv4/ip_local_port_range

		html文档格式：
			<html>
				<head>
					<title>TITLE</title>
				</head>
				<body>
					<h1>...</h1>
					...
				</body>
			</html>


	http协议：
		http事务：request/response
			request:
				<method> <URL> <version>
				HEADERS:

				<body>

			response：
				<version> <status code> <reason phrase>
				HEADERS

				<body>

		URL：统一资源定位符；
			scheme://host[:port]/path/to/some_resource

		HEADERS:
			Name: Value

		<method>
			请求方法：
				GET、HEAD、POST、PUT、DELETE、OPTIONS、TRACE、……

		<status code>
			1xx：信息类
			2xx：成功类
			3xx：重定向类
			4xx：客户端错误类
			5xx：服务端错误类

		一次完整的Http请求响应过程：
			(1) 建立或处理连接；接收或拒绝请求；
			(2) 接收请求：
			(3) 处理请求：解析请求；
			(4) 访问资源：
				资源映射：DocumentRoot /var/www/html/
					http://www.magedu.com/index.html --> /var/www/html/index.html
			(5) 构建响应报文
			(6) 发送响应报文
			(7) 记录日志

		http请求处理中的连接方式：
			短连接：非保持连接
			长连接：保持连接
				数量：多少个资源，100；
				时间：多长时间；

	http协议：
		开源实现：
			httpd (apache)
			nginx
			lighttpd

		httpd：
			www.netcraft.com

			ASF：apache software foundation
				License: apache

			http://httpd.apache.org

			apache: a patchy server, NSF,

		httpd的特性：
			高度模块化：core module + modules
				DSO：Dynamic Shared Object

			MPM：Multipath processing modules
				prefork：多进程模型
					每个请求用一个进程来处理；
				worker：多线程模型
					每个请求用一个线程来处理；
				event：事件驱动模型
					每个进程处理多个请求；

			httpd的功能特性：
				虚拟主机：IP，PORT，FQDN
				反向代理：http, ajp, fcgi, wsgi, ...
				负载均衡：bytraffic, byrequest, bybusiness
				CGI: Common Gateway Interface
				...

			httpd的版本：
				httpd-1.3
				httpd-2.0
				httpd-2.2
				httpd-2.4

		安装httpd：
			OS vendor：base源
			编译安装：

			CentOS 6：httpd-2.2
			CentOS 7: httpd-2.4

		CentOS 7：
			程序环境：
				主程序：/usr/sbin/httpd
				配置文件：/etc/httpd/conf/httpd.conf
					/etc/httpd/conf.d/*.conf
					/etc/httpd/conf.modules.d/*.conf
				Unit File：
					/usr/lib/systemd/system/httpd.service
				模块文件目录：
					/usr/lib64/httpd/modules/
				站点（主服务器）根目录默认：
					/var/www/html/
				日志文件：
					/var/log/httpd/
						error_log
						access_log

			判断服务正常与否：
				ss -tnlp | grep  ":80\>"
				systemctl status httpd.service


回顾：
	http协议：应用层协议，socket方式，IPC
		80/tcp, 443/tcp

	实现：httpd, nginx, ...

	httpd：模块化、DSO、虚拟主机、……

	程序环境：
		/etc/httpd/conf/httpd.conf
			/etc/httpd/conf.d/*.conf
			/etc/httpd/conf.modules.d/*.conf

		httpd -M

httpd(2)

	httpd-2.4的基础配置
		配置项：
			DIRECTIVE VALUE
				directive：配置指令，不区分字符大小写；例如DocumentRoot, DirectoryIndex, ...
				value：除了文件系统路径之外，大多数不区分字符大小写

		1、修改监听的地址和端口
			Listen [IP:]PORT

			可重复定义多次；

		2、持久连接
			KeepAlive On|Off
			KeepAliveTimeout #
			MaxKeepAliveRequests #

		3、DSO
			LoadModule  Mod_Name  modules/Module_FILE.so

			注意：相对路径相对于“ServerRoot”指令的值而言；默认为/etc/httpd/；

		4、日志设定
			日志有两种类型：
				错误日志、访问日志

			错误日志：
				ErrorLog  logs/error_log
				LogLevel warn

			访问日志：
				LogFormat：定义日志格式；
				CustomLog：日志文件位置以及日志格式；

				格式：
					%h：Remote hostname. Will log the IP address if HostnameLookups is set to Off, which is the default.
					%l：Remote logname (from identd, if supplied).
					%u：Remote user if the request was authenticated. May be bogus if return status (%s) is 401 (unauthorized).
						http协议认证：通过认证质询实现；
					%t：Time the request was received, in the format [18/Sep/2011:19:18:28 -0400].
					%r：First line of request.
					%b：Size of response in bytes, excluding HTTP headers.
					%s：Status. For requests that have been internally redirected, this is the status of the original request. Use %>s for the final status.
					%{VARNAME}i：记录VARNAME变量（首部）的值；%{Referer}i


			format_strings：
				http://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats

		5、如何使用本地手册
			安装httpd-manual程序包，重载服务；

			http://HOST/manual/

		6、主机相关的配置：
			中心主机，默认主机：
				DocumentRoot
				ServerName
			虚拟主机：

			站点资源访问控制：
				基于文件系统路径控制：
					<Directory  "/PATH/TO/DIR">
						...
					</Directory>

				基于URL路径控制：
					<Location "">
						...
					</Location>

			目录中的常用指令：
				(1) Options：用于定义资源的展示方式； 后跟以空白字符分隔的“选项”列表；
					Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
					None
					All

				(2) AllowOverride：httpd允许在网页文档的各目录下使用隐藏文件.htaccess来各自的访问控制；此指令定义哪此指令可以在.htaccess中定义；

					Options FileInfo AuthConfig Limit
					None
					All

				(3) Require
					允许所有客户端访问：Require all granted
					拒绝所有客户端访问：Require all denied

					<RequireAll>
						Require ip 10.1.0.0/16
						Require all denied
					</RequireAll>

					控制特定的客户端访问：
						Require ip IP|NETWORK
						Require not ip IP|NETWORK

						Require host HOSTNAME
						Require not  host HOSTNAME

							HOSTNAME：
								FQDN：
								domain.tld：

		7、定义站点主页面
			DirectoryIndex  filename1 filename2 ...

		8、路径别名：

			Alias  /URL/  "/PATH/TO/SOME_DIR/"

		9、虚拟主机：

			站点标识：IP，PORT，ServerName

			虚拟主机的配置方式
			<VirutalHost IP:PORT>
				ServerName
				DocumentRoot
			</VirutalHost>


			<VirtualHost 10.1.0.67:80>
				ServerName www1.magedu.com
				DocumentRoot "/vhosts/www1"
				<Directory "/vhosts/www1">
					Options None
					AllowOverride None
					Require all granted
				</DIrectory>
			</VirtualHost>

			<VirtualHost 10.1.0.67:80>
				ServerName www2.magedu.com
				DocumentRoot "/vhosts/www2"
				<Directory "/vhosts/www2">
					Options None
					AllowOverride None
					Require all granted
				</DIrectory>
			</VirtualHost>

			<VirtualHost 10.1.0.67:80>
				ServerName www3.magedu.com
				DocumentRoot "/vhosts/www3"
				<Directory "/vhosts/www3">
					Options None
					AllowOverride None
					Require all granted
				</DIrectory>
			</VirtualHost>

			注意：httpd-2.2要求使用基于ServerName的虚拟主机时，要使用专用指令NameVirtualHost；

		10、status页面
			<Location /status>
				SetHandler server-status
				Require all granted
			</Location>

			ExtendedStatus {On|Off}

		11、MPM

			httpd-2.2：static
			httpd-2.4：shared

			prefork：两级架构
				master process：1个，
				child process：n个，
			worker：每线程响应一个请求；三级架构
				master process：1个
				child process：n个
					thread：m个
			event：每进程响应多个请求；


			prefork
				ServerLimit
				StartServers
				MinspareServers
				MaxSpareServers
				MaxConnectionsPerchild
				MaxRequestWorkers

			woker:
				ServerLimit
				StartServers
				MinSpareThreads
				MaxSpareThreads
				MaxRequestWorkers
				ThreadsPerChild

			event：
				ThreadsPerChild
				MaxRequestWorkers
				AsyncRequestWorkerFactor


		12、用户认证

			http协议认证：由http协议的实现自身进行认证
			表单认证：由服务器端的应用程序进行认证

			http协议的认证：
				认证质询：
					WWW-Authenticate：响应码为401，拒绝客户端请求，并说明要求客户提供账号和密码；

				认证：
					Authorization：客户端填入账号和密码后再次发送请求报文 ，认证通过后，服务端将响应请求的资源；

				认证的方式有两种：
					basic：明文
					digest：摘要

				虚拟账号：仅用于访问某服务时使用；
					存储于何处：
						文本文件
						SQL数据库
						ldap目录服务中
						...

				安全域：Realm

				basic认证的实现示例：

					基于用户进行认证：
						<VirtualHost 10.1.0.67:80>
							ServerName www1.magedu.com
							DocumentRoot "/vhosts/www1"
							<Directory "/vhosts/www1">
								Options None
								AllowOverride None
								Require all granted
							</DIrectory>

							<Directory "/vhosts/www1/admin">
								Options None
								AllowOverride None
								AuthType basic
								AuthName "Admin Area, Enter your name/password"
								AuthUserFile "/etc/httpd/conf/.htpasswd"
								Require valid-user
							</Directory>

							CustomLog "logs/www1-access.log" combined
							ErrorLog "logs/www1-error.log"
						</VirtualHost>

					认证文件：htpasswd
						htpasswd [OPTIONS] /PATH/TO/HTPASSWD_FILE USERNAME [PASSWORD]
							-c：创建文件
							-m：使用md5
							-s：

					基于组进行认证：

							<Directory "/vhosts/www1/admin">
								Options None
								AllowOverride None
								AuthType basic
								AuthName "Admin Area, Enter your name/password"
								AuthUserFile "/etc/httpd/conf/.htpasswd"
								AuthGroupFIle "/etc/httpd/conf/.htgroup"
								Require group
							</Directory>

						组账号文件格式：每行一个组定义
							group_name: user1 user2 ...


			13、woker进程的运行者身份
				User/Group

				注意：文件系统上网页资源的访问权限要配置正确；

	练习：(1)基于主机名实现三个虚拟主机
		    (2) 每虚拟主机使用独立的访问日志和错误日志
		    (3) 第三个虚拟主机的/admin要进行用户访问认证
		    (4) 在第二个虚拟主机上提供/status；
		    (5) 在第三个虚拟主机提供路径别名/bbs，访问其它文件系统路径；
		    (6) 尝试使用混合类型的虚拟主机：
			基于IP，PORT和ServerName

	练习2：使用脚本实现以上功能；
		每虚拟使用单独的配置文件；
		脚本可接受参数，参数虚拟主机名称；


回顾：httpd-2.4基础配置

	listen、保持连接、MPM（prefork, worker, event）、日志、主页、基于客户端源地址的访问控制、基于用户的访问控制机制、虚拟主机
	... ...

http(3)

	http协议：
		事务：request/response
			request：
				<method> <URL> <version>
				HEADERS

				<body>

			response:
				<version> <status> <reason-phrase>
				HEADERS

				<body>

			HEADERS:
				Name: Value1, Value2, ...

				首部分类
					通用首部
					请求首部
					响应首部
					实体首部
					扩展首部

				通用首部：请求和响应报文通用
					Connection：{close, keep-alive}
					Date：报文创建的日期时间
					Via：经由，报文传输经过的中间代理服务器；
					Cache-Control：定义缓存控制机制；
					Pragma：

				请求首部：
					Accept：可接受的MIME类型；
					Accept-language：
					Accept-encoding：接受的编码格式，deflate, gzip, ...
					Accetp-Charset：接受的字符集格式

					Client-IP：
					Host：请求的服务器的名称和端口；
					Referer：跳转至当前页面上级页面；
					User-Agent：客户端代理

					条件式请求首部：
						Expect：
						If-Modified-Since
						If-Unmodified-Since
						If-None-Match
						If-Match

					安全请求首部：
						Authorization
						Cookie：
						Cookie2：

				响应首部：
					信息性首部：
						Age:
						Server:

					协商首部：
						Accept-Range：服务端可接受的请求类型的范围；
						Vary：其它首部列表；

					安全响应首部：
						Set-Cookie
						Set-Cookie2
						WWW-Authencate：认证质询

				实体首部：
					Content-Encoding
					Content-language
					Content-Lenth
					Content-Location
					Content-Type
					...

					Allow: 允许的请求方法；
					Location：资源的真正地址；

					缓存相关：
						Etag：
						Expires:
						Last-Modified:

				扩展首部：
					X-Forwarded-For：
					...

				《http权威指南》

		url：Uniform Resource Locator
			URL scheme：协议，http, https, ftp, ...
			服务器地址：IP:Port
			资源路径：/PATH/TO/SOME_RESOURCE

			基本语法格式：
				<scheme>://<user>:<passowrd>@<host>[:<port>]/<path>;<params>?<query>#<frag>
					params：参数，;name=value&name=value
					query：查询字符串，?field=value&field=value
					frag：页面锚定符；#frag_id

	httpd-2.4基本配置：

 		14、curl命令

			curl是基于URL语法在命令行方式下工作的文件传输工具，它支持FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE及LDAP等协议。curl支持HTTPS认证，并且支持HTTP的POST、PUT等方法， FTP上传， kerberos认证，HTTP上传，代理服务器， cookies， 用户名/密码认证， 下载文件断点续传，上载文件断点续传, http代理服务器管道（ proxy tunneling）， 甚至它还支持IPv6， socks5代理服务器,，通过http代理服务器上传文件到FTP服务器等等，功能十分强大。

			curl  [options]  [URL...]

			curl的常用选项：

			    -A/--user-agent <string> 设置用户代理发送给服务器
			    --basic 使用HTTP基本认证
			    --tcp-nodelay 使用TCP_NODELAY选项
			    -e/--referer <URL> 来源网址
			    --cacert <file> CA证书 (SSL)
			    --compressed 要求返回是压缩的格式
			    -H/--header <line>自定义首部信息传递给服务器
			    -I/--head 只显示响应报文首部信息
			    --limit-rate <rate> 设置传输速度
			    -u/--user <user[:password]>设置服务器的用户和密码
			    -0/--http1.0 使用HTTP 1.0

			用法：curl [options] [URL...]

			另一个工具：elinks
				elinks  [OPTION]... [URL]...
					-dump: 不进入交互式模式，而直接将URL的内容输出至标准输出；

		15、使用mod_deflate模块压缩页面优化传输速度

			适用场景：
				(1) 节约带宽，额外消耗CPU；同时，可能有些较老浏览器不支持；
				(2) 压缩适于压缩的资源，例如文件文件；

			SetOutputFilter DEFLATE

			# mod_deflate configuration


			# Restrict compression to these MIME types
			AddOutputFilterByType DEFLATE text/plain
			AddOutputFilterByType DEFLATE text/html
			AddOutputFilterByType DEFLATE application/xhtml+xml
			AddOutputFilterByType DEFLATE text/xml
			AddOutputFilterByType DEFLATE application/xml
			AddOutputFilterByType DEFLATE application/x-javascript
			AddOutputFilterByType DEFLATE text/javascript
			AddOutputFilterByType DEFLATE text/css

			# Level of compression (Highest 9 - Lowest 1)
			DeflateCompressionLevel 9

			# Netscape 4.x has some problems.
			BrowserMatch ^Mozilla/4  gzip-only-text/html

			# Netscape 4.06-4.08 have some more problems
			BrowserMatch  ^Mozilla/4\.0[678]  no-gzip

			# MSIE masquerades as Netscape, but it is fine
			BrowserMatch \bMSI[E]  !no-gzip !gzip-only-text/html

		16、https,  http over ssl

			SSL会话的简化过程
				(1) 客户端发送可供选择的加密方式，并向服务器请求证书；
				(2) 服务器端发送证书以及选定的加密方式给客户端；
				(3) 客户端取得证书并进行证书验正：
					如果信任给其发证书的CA：
						(a) 验正证书来源的合法性；用CA的公钥解密证书上数字签名；
						(b) 验正证书的内容的合法性：完整性验正
						(c) 检查证书的有效期限；
						(d) 检查证书是否被吊销；
						(e) 证书中拥有者的名字，与访问的目标主机要一致；
				(4) 客户端生成临时会话密钥（对称密钥），并使用服务器端的公钥加密此数据发送给服务器，完成密钥交换；
				(5) 服务用此密钥加密用户请求的资源，响应给客户端；

				注意：SSL会话是基于IP地址创建；所以单IP的主机上，仅可以使用一个https虚拟主机；

			回顾几个术语：PKI，CA，CRL，X.509 (v1, v2, v3)

			配置httpd支持https：
				(1) 为服务器申请数字证书；
					测试：通过私建CA发证书
						(a) 创建私有CA
						(b) 在服务器创建证书签署请求
						(c) CA签证

				(2) 配置httpd支持使用ssl，及使用的证书；
					# yum -y install mod_ssl

					配置文件：/etc/httpd/conf.d/ssl.conf
						DocumentRoot
						ServerName
						SSLCertificateFile
						SSLCertificateKeyFile

				(3) 测试基于https访问相应的主机；
					# openssl  s_client  [-connect host:port] [-cert filename] [-CApath directory] [-CAfile filename]

		17、httpd自带的应用程序
			htpasswd：basic认证基于文件实现，用于生成账号和密码的程序；
				htdbm
				htdigest
			apachectl：httpd自带的服务控制脚本，支持start和stop等子命令；
			apxs：- APache eXtenSion tool

			rotatelogs：

			ab：apache benchmark
				webbench, httpload, ...

				loadrunner, jmeter (ASF)

				tcpcopy，


 回顾：
	http协议： HEADERS，scheme
		HEADERS：
			通用首部：Connect, Data, ...
			请求首部：Host, ...
			响应首部：
			实体首部：Content-encoding, ...
			扩展首部：X-Forwarded-For, ...

		url
			scheme://<user>[:<password>]@<host>[:<port>]/path;params?query#frag

	配置：
		https, curl, mod_deflate, ...

httpd(4)

	18、ab - web service的压力测试工具

		命令行工具：ab, webbench, httpload, seige, ...
		GUI：loadrunner, jmeter
		tcpcopy

		ab [options]  [http[s]://]hostname[:port]/path
			请求数：-n requests
			并发数： -c concurrency
			长连接：-k

	MPM：
		prefork：进程模型，两级架构，master/worker，每worker处理一个请求；
		worker：线程模型，三级架构，maste/worker/thread, 每thread处理一个请求；workers*threads
		event：事件驱动模型，两级架构，master/worker，每进程处理多个请求；

	httpd-2.2与httpd-2.4的不同之处
		MPM是非DSO机制，不支持LoadModule进行切换；

			切换：/etc/sysconfig/httpd
				定义HTTPD变量的值：
					/usr/sbin/httpd
					/usr/sbin/httpd.worker
					/usr/sbin/httpd.event

			prefork的配置：
				<IfModule prefork.c>
				StartServers       8
				MinSpareServers    5
				MaxSpareServers   20
				ServerLimit      256
				MaxClients       256
				MaxRequestsPerChild  4000
				</IfModule>

			worker的配置：
				<IfModule worker.c>
				StartServers         4
				MaxClients         300
				MinSpareThreads     25
				MaxSpareThreads     75
				ThreadsPerChild     25
				MaxRequestsPerChild  0
				</IfModule>

		基于IP的访问控制机制：
			Order allow, deny
			allow from CLIENTS
			deny from  CLIENTS

			CLEINTS:
				IP,
				NETWORK
				HOSTNAME
				DOMAIN.TLD

		虚拟主机：
			基于ServerName的虚拟主机，要使用专用指令NameVirtualHost；

		# service SysV_Init_Script start|stop|restart|status|reload
		# chkconfig SysV_Init_Script  on|off

	lamp：
		静态资源：原始形式与响应结果一致；
		动态资源：原始形式通常是程序文件（某种编程语言开发的程序文件），需要运行后将运行生成的结果呈现给用户；
			客户端技术：js
			服务端技术：php, jsp, ...


		CGI：Common Gateway Interface
			CIG是一种协议，定义了客户端(httpd)与服务端(特定的应用程序服务进程)交换数据的一种规范；

		服务器端技术框架：
			web server：httpd, ...
			application server：php, perl, python, ruby, java(jsp), ...
			data server：
				SQL：Oracle, SQL Server, MySQL, PostgreSQL, SQLite, ...
				NoSQL：
					K/V
					Document
					Column
					Graph

			开源领域：
				httpd+php+mysql: amp
				httpd+jsp+mysql: amt
					jsp：tomcat, resin, jetty, websphere, weblogic, ...

		php编程语言，基于此语言存在很多开源应用程序；嵌入式编程语言，可直接嵌入至html文档中，而非由php代码生成html标签；
			wordpress, ...

		CentOS 7：
			# yum install php php-mysql mariadb-server httpd

		CentOS 6:
			# yum install php php-mysql mysql-server httpd

		测试页：
			phpinfo.php
			<?php
				php code;
				...
			?>

		httpd+php：
			module
				httpd的MPM分两类：
					进程式：prefork
					线程式：worker, event
			CGI：
			FastCGI: fcgi
				httpd+fcgi（module）
				php-fpm (server)

		部署应用：
			discuzX, phpMyAdmin

	MySQL：
		C/S
			Server: mysqld_safe, 3306/tcp
			Client: mysql
				mysql [OPTIONS]
					-hSERVER
					-uUSERNAME
					-pPASSWORD


				mysql> 提示符下的可用命令
					客户端命令：
						help可获取命令列表
						\?
					服务端命令：通过mysql协议发往服务端运行，并收取其响应结果；
						此类命令都必须有命令结束符；通常可称为SQL语句；
						DDL：Data Defination language
							CREATE, ALTER, DROP
						DML：Data Manipulating language
							INSERT, DELETE, SELECT, UPDATE

						grant/revoke

					授权命令：
						GRANT ALL [PRIVILEGES] ON db.tbl TO 'username'@'host'  IDENTIFIED BY 'password';
							db.tbl：
								db：数据名字，可用*通配；
								tbl：表名称，可用*通配；
									wpdb.*：wpdb数据库的所有表；
									*.*：所有库的所有表；
									wpdb.users：wpdb库的users表；
							username@host：
								username：用户名，字符串；
								host：用户可通过哪些客户端主机连接当前mysql server；可使用通配符；
									%：任意长度的任意字符；
									_：任意单个字符；

									dzuser@'10.1.%.%'

				配置文件：ini风格的配置文件
					/etc/my.cnf, /etc/my.cnf.d/*.cnf

					[mysqld]
					skip_name_resolve = ON
					innodb_file_per_table = ON

				首次启动时，配置安全选项：
					mysql_secure_installation


	练习：分别使用CentOS 7和CentOS 6实现以下任务
		(1) 配置三个基于名称的虚拟主机；
			(a) discuzX
			(b) wordpress
			(c) https: phpMyAdmin
		(2) 对discuzX的主页做压测；
			分别给出并发10, 100, 200, 500等每秒的响应数；

回顾：httpd, lamp
	httpd：mod_deflate, http over ssl/tls

	httpd+php：
		Modules
		FastCGI
		CGI

	amp：
		静态资源：Client --> (http) --> httpd
		动态资源：Client --> (http) --> httpd --> libphp5.so
		动态资源：Client --> (http) --> httpd --> libphp5.so (php-mysql) --> (mysql) --> mysqld

lamp(1)

	PHP:
		作者：Rasmus Lerdorf， 1994, Personal Home Page Tool, per --> C, PHP/FI, php 1.0
		zeev, andi, 重写php的分析器（parser）
			zend, 1.0 --> php 4.0
			zend 2.0 --> php 5.0

				php代码的执行过程分成了两个阶段：
					编译：字节码，bytecode，opcode
					执行：zend engine

			opcode：Scanning, Parsing, Compilation, Execution

		加速器：
			apc, eAccelerator,
			xcache;

			# yum install php-xcache

		php配置文件：
			/etc/php.ini, /etc/php.d/*.ini

			ini：
				[foo]：Section Header
				directive = value

				注释符：#, ;

				php.ini的核心配置选项文档：
					http://php.net/manual/zh/ini.core.php
				php.ini配置选项列表：
					http://php.net/manual/zh/ini.list.php

	php-fpm：
		fastcgi process manager
		安装配置：
			CentOS 7：
				php-fpm：
					Unit file：/usr/lib/systemd/system/php-fpm.service
					配置文件：/etc/php-fpm.conf， /etc/php-fpm.d/*.conf
					主程序：/usr/sbin/php-fpm

				配置：
					[global]
					pid = /run/php-fpm/php-fpm.pid
					error_log = /var/log/php-fpm/error.log
					log_level = notice
					daemonize = no
					[pool_id]
					listen = 127.0.0.1:9000
					listen.backlog = -1
					listen.allowed_clients = 127.0.0.1
					user = apache
					group = apache
					pm = dynamic
						定义processor管理机制：static, dynamic
					pm.max_children：最大子进程数量；连接池的最大容量；
					pm.start_servers：服务启动时所启动的子进程数量；
					pm.min_spare_servers
					pm.max_spare_servers
					rlimit_files = 1024
					rlimit_core = 0
					pm.status_path = /status
					ping.path = /ping
					ping.response = pong

					php_value[session.save_path] = /var/lib/php/session
						session的存储位置

			配置示例1：
				<VirtualHost *:80>
					ServerName www.magedu.com
					DocumentRoot "/vhosts/www"
					<Directory "/vhosts/www">
						Options None
						AllowOverride None
						Require all granted
					</Directory>
					ProxyRequests Off
					ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/vhosts/www/$1
					DirectoryIndex index.php
				</VirtualHost>

			配置示例2：
				<VirtualHost *:80>
					ServerName www.magedu.com
					DocumentRoot "/vhosts/www"
					<Directory "/vhosts/www">
						Options None
						AllowOverride None
						Require all granted
					</Directory>
					ProxyRequests Off
					ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/vhosts/www/$1
					ProxyPassMatch ^/(ping|status)/?$ fcgi://127.0.0.1:9000/$1
					DirectoryIndex index.php
				</VirtualHost>

				status输出：
					pool:                 www     #连接池名称
					process manager:      dynamic  #进程管理器类型
					start time:           11/Oct/2016:11:22:04 +0800   #启动日期时间
					start since:          917  # 运行时长
					accepted conn:        9  # 连接池已经处理过的请求数
					listen queue:         0  # 请求队列长度
					max listen queue:     0 # 请求队列的最大长度
					listen queue len:     128 # socket等待队列的长度
					idle processes:       4  # 空闲进程数量
					active processes:     1 # 活跃的进程数量
					total processes:      5 # 连接池中的总进程数量
					max active processes: 2 # 连接池中最大的活跃进程数量
					max children reached: 0 # 达到连接池中最大进程数量限制的上限的次数
					slow requests:        0 ：启用了slow-log时，记录慢请求的数量

				其它格式的输出：
					/status?json
					/status?xml
					/status?html
					/status?full

				full格式的输出：
					pid:                  1378
					state:                Idle   # 当前进程状态，idle, running, ...
					start time:           11/Oct/2016:11:22:04 +0800  #进程的启动日期时间
					start since:          1386  # 运行时长
					requests:             3  # 处理过的请求数量
					request duration:     119  # 请求时长，单位是微秒
					request method:       GET  # 请求方法，GET，POST等；
					request URI:          /status?html  # 请求的URL
					content length:       0 #请求内容的长度，POST方法才有意义 ；
					user:                 -  # 用户，由PHP_auth_user认证的用户；
					script:               - # 运行的php脚本；
					last request cpu:     0.00  # 最后一次请求的CPU使用量；
					last request memory:  262144	# 最后一次请求的内存使用量；

		注意：部署需要用到session的应用时，其session的默认存储位置 ，确保此目录存在，且运行用户有写入权限；

回顾：
	amp：
		php：php core + php extesions
			php core：
				httpd modules（php）：libphp5.so
					restart|reload httpd
					php配置文件：/etc/php.ini, /etc/php.d/*.ini
				fastcgi（php-fpm）：php-fpm
					restart|reload php-fpm
					php配置文件：/etc/php.ini, /etc/php.d/*.ini
					fpm配置文件：/etc/php-fpm.conf, /etc/php-fpm.d/*.conf

			php extensions：
				php-mysql, php-mbstring, php-mcrypt, php-xcache(opcode cacher)

		fcgi协议反代：
			ProxyRequests Off
			ProxyPass
			ProxyPassMatch ^(URL_PATTERN)$  fcgi://fcgi_server:port/PATH/TO/DIR/$1

	php配置文件：/etc/php.ini, /etc/php.d/*.ini
	fpm配置文件：/etc/php-fpm.conf, /etc/php-fpm.d/*.conf

lamp(2)
	编译安装amp：
		(1) 系统环境：CentOS 6, 7
			httpd依赖于apr和apr-util
				apache portable runtime
		(2) 开发环境；
			Development Tools, Server Platform Development
		(3) 各程序的版本：
			httpd: 2.2, 2.4
			php：5.x
			mysql：5.1, 5.5, 5.6, 5.7, 5.8,
			mariadb: 5.x, 10.x
		(4) httpd+php
			modules: --with-apxs=
				prefork：libphp5.so
				worker, event：libphp5-zts.so
			fpm：
				5.3.3-， 手动打上fpm patch；
				5.3.3+：自带了fpm, 编译时只需要使用--fpm选项；

		过程：
			安装MySQL：
				预制的二进制程序包：
					os vendor：mariadb-devel或mysql-devel；
					项目官方：
				二进制格式程序包：展包即用；
				源代码：编译安装；

				通用二进制格式包的安装步骤：
					# groupadd -r mysql
					# useradd -g mysql -r mysql
					# tar xf mariadb-VERSION-linux-x86_64.tar.gz -C /usr/local
					# cd /usr/local
					# ln -sv mariadb-VERSION-linux-x86_64 mysql
					# cd mysql
					# chown -R root:mysql ./*

					# mkdir /mydata/data -pv
					# chown mysql:mysql /mydata/data

					# scripts/mysql_install_db --user=mysql --datadir=/mydata/data

					# cp support-files/my-large.cnf  /etc/my.cnf

					修改配置：
					[mysqld]
					...
					datadir = /mydata/data

					# cp  support-files/mysql.server  /etc/rc.d/init.d/mysqld
					# chmod +x /etc/rc.d/init.d/mysqld

					# chkconfig --add mysqld
					# service mysqld start

			安装httpd-2.4
				# yum groupinstall "Development Tools" "Server Platform Development"
				# yum install pcre-devel openssl-devel libevent-devel  apr-devel apr-util-devel

				# ./configure --prefix=/usr/local/apache2 --sysconfdir=/etc/httpd --enable-so --enable-ssl --enable-cgi --enable-rewrite --enable-modules=most --enable-mpms-shared=all --with-mpm=prefork --with-pcre --with-zlib --with-apr=/usr --with-apr-util=/usr
				# make -j #
				# make install
				# apachectl start

			安装php5：
				# yum install gd-devel freetype-devel libmcrypt-devel libxml2-devel

				./configure --prefix=/usr/local/php --with-mysql  --with-openssl --with-mysqli=/usr/bin/mysql_config --enable-mbstring --enable-xml --enable-sockets --with-freetype-dir --with-gd --with-libxml-dir=/usr --with-zlib --with-jpeg-dir --with-png-dir --with-mcrypt --with-apxs2=/usr/local/apache2/bin/apxs --with-config-file-path=/etc/php.ini --with-config-file-scan-dir=/etc/php.d/
				# make -j #
				# make install

				# cp php.ini-production /etc/php.ini
				# mkdir /etc/php.d/

				注意：如果httpd使用线程模型MPM，需要额外的--enable-maintainer-zts选项；

				注意：如果要以fpm方式运行php，需要编译时移除--with-apxs选项，额外添加--enable-fpm选项；

				注意：如果是独立安装的mysql-server, 假设安装在/usr/local/mysql目录下，则需要使用类似如下的.configure命令：
				./configure --prefix=/usr/local/php --with-mysql=/usr/local/mysql  --with-openssl --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-mbstring --enable-xml --enable-sockets --with-freetype-dir --with-gd --with-libxml-dir=/usr --with-zlib --with-jpeg-dir --with-png-dir --with-mcrypt --with-apxs2=/usr/local/apache2/bin/apxs --with-config-file-path=/etc/php.ini --with-config-file-scan-dir=/etc/php.d/

			整合php至httpd上：
				httpd.conf配置文件中：
				AddType application/x-httpd-php .php
				DirectoryIndex index.php index.html

	MariaDB(MySQL)：

		数据模型：层次模型、网状模型、关系模型

			关系模型：
				二维关系：表
					行：row, entry
					列：column, attribution
				索引：数据结构，辅助完成数据查找的；

			SQL接口：
				Structure Query Language
					DDL：Data Defination Language, CREATE, ALTER, DROP
					DML：Data Manipulating Language, INSERT, DELETE, UPDATE, SELECT
					DCL：Data Control Language, GRANT, REVOKE

				ANSI：SQL标准，SQL-86, SQL-89, SQL-92, SQL-99, SQL-03,...

				SQL代码：
					存储过程
					存储函数
					触发器
					事件调度器

			存储引擎：

		DBMS：DataBase Management System
			RDBMS：Relational DBMS

			MySQL/MariaDB：单进程，多线程

		事务：Transaction，组织一个或多个操作为一个整体，这多个操作要么都完成，要么都不执行；
			A：12000
			B：3000

			一个存储系统是否支持事务，就看其是否满足ACID测试：
				A：原子性；
				C：一致性；
				I：隔离性；
				D：持久性；

		关系型数据库的设计范式：

		数据约束：向数据表插入的数据要遵守的限制规则；
			主键：primary key， 一个或多个字段的组合，填入主键字段中的数据，必须不同于已经存在的其它相同字段上的数据，而且不能为空；一个表只能有一个主键；
			惟一键：unique key，一个或多个字段的组合，填入主键字段中的数据，必须不同于已经存在的其它相同字段上的数据；一个表可以存在多个惟一键；
			外键：foreign key，一个表中的某字段中能插入的数据取值范围，取决于引用的另一张表的主键字段上的已存在数据集合；
			检查条件约束：check，

		索引：数据结构，将表中的某一个或某些字段抽取出来，单独组成成为一个独特数据结构；常见的索引类型：
			树型：BTree；
			hash：k/v；

		关系运算：
			选择：挑选行；
			投影：挑选列；
			连接：将表建立关联关系；

		MySQL：
			C/S：
				S：mysqld, mysqld_safe, mysqld_multi
				C：mysql, mysqladmin, mysqldump, ...
				非客户端工具：工作于服务端主机，用于实现一些管理操作；

			数据类型：
				字符型：
					定长字符型：
						CHAR(#)
						BINARY(#)
					变长字符型：
						VARCHAR(#)
						VARBINARY(#)
					内建数据类型：
						ENUM
						SET
				数值型：
					精确数值：
						整型：
							TINYINT，SMALLINT，MEDIUMINT，INT，BIGINT
					近似数值：
						浮点型：
							FLOAT
							DOUBLE
				日期时间：
					DATE：日期型
					TIME：时间型
					DATETIME：日期时间型
					YEAR(2)：
					YEAR(4)：
					TIMESTAMP：

	练习：编译安装amp，提供两个基于主机名的虚拟主机
		(1) https, 部署pma；
		(2) 部署wordpress；
	练习2：脚本实现amp编译安装；


回顾：Mariadb基础
	关系：二维关系（行，列）
		表、索引、视图、……
	设计范式：
		第一范式：字段是原子性的；
		第二范式：存在可用的主键；
		第三范式：任何字段都不应该依赖于其它表的非主属性；
	约束：primary key, unique key, foreign key, check
	MariaDB安装方式：
		通用二进制格式包
		源码编译安装：cmake
	SQL：
		数据库、表、索引、视图、存储过程、存储函数、触发器、事件调度器、用户和权限；

		DDL，DML，DCL
			DDL：CREATE，ALTER，DROP
			DML：INSERT， DELETE，UPDATE，SELECT
			DCL：GRANT，REVOKE

MariaDB基础应用(2)

	MariaDB程序组成：
		C：Client
			mysql
			mysqladmin
			mysqldump
			mysqlbinlog
			...
		S：Server
			mysqld
			mysqld_safe：线程安全；
			mysqld_multi：多实例；
		管理工具程序：
			myisampack, myisamchk

		三类套接字地址：
			IPV4:PORT
			IPV6:PORT
			Unix Sock：/var/lib/mysql/mysql.sock，/tmp/mysql.sock

	命令行交互式客户端程序：mysql
		mysql [OPTIONS] [database]
			常用选项：
				-uUSERNAME
				-hHOST
				-p[PASSWORD]

				-Ddb_name

				--socket=path, -S path
				--port=port_num, -P port_num

				--execute=statement, -e statement

			命令：
				客户端命令
					mysql> help
						\u db_name：设定默认数据库；
						\q：退出客户端；
						\d CHAR：自定义语句结束符，默认为分号；
						\g：语句结束标记，将命令发往服务端运行；
						\G：语句结束标记，将命令发往服务 端运行，行数据纵向显示；
						\! SHELL_COMMAND：
						\s：连接状态及服务器运行状态
						\. /path/to/some_sql_script：运行SQL脚本
						...
				服务端命令：发往服务器端执行的SQL语句
					(1) 语句结束符；
					(2) 建立了与某服务器有效通信连接；

		数据类型：
			表：行、列
				定义列时需要选定合适的数据类型；
				符合范式设计的要求；
				定义约束关系；

				column_name DATA_TYPE CONSTRAINT
					UNSINGED

			字符型：
				定义字符型：CHAR(#)，BINARY(#)
				变长字符型：VARCHAR(#) ,VARBINARY(#)
				对象存储：TEXT，BLOB
				内建：ENUM，SET

				注意：所有字符型数据要使用引号；
			数值型：
				精确数值：INT
				近似数值：FLOAT，DOUBLE

				注意：不能使用引号；
			日期时间型：
				DATE，TIME，DATETIME，TIMESTAMP，YEAR

	SQL语句：
		DDL：数据定义语言，主要用于管理库组件，例如数据库、表、索引、视图、用户、存储过程、存储函数、触发器、……
			CREATE，ALTER，DROP
		DML：数据操纵语言，主要用于管理表中数据，实现数据CRUD操作
		DCL：管理授权

		获取帮助：
			mysql> help KEYWORD

		数据库管理：
			创建：
				CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name

			修改：
				ALTER DATABASE

			删除：
				DROP {DATABASE | SCHEMA} [IF EXISTS] db_name

		表管理：
			表创建：
				CREATE TABLE [IF NOT EXISTS] tbl_name (create_defination) [table options]

				create_defination：由逗号分隔的列表
					字段定义：
						colume_name COLUMN DEFINATION
					约束：
						PRIMARY KEY
						UNIQUE KEY
						FOREIGN KEY
						CHECK(expr)
					索引：
						{INDEX|KEY}
						{FULLTEXT|SPATIAL}

				column_definition:
					data_type [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY]

				[table options]
					ENGINE [=] engine_name
					……

				查看数据库所支持所有存储引擎类型：
					mysql> SHOW ENGINES;

			查看表的属性信息：
				SHOW TABLE STATUS [WHERE Name='tbl_name'][LIKE PATTERN]

			修改：
				ALTER  TABLE tbl_name [alter_specification [, alter_specification] ...]

				alter_specification：
					（1） 表选项
						table_options

					（2）表组成
						字段：
							ADD col_name DATA_TYPE [FIRST|AFTER col_name]
							DORP [COLUMN] col_name
							CHANGE
							MODIFY
						索引：
							ADD INDEX(col1, col2, ...)
							DROP INDEX index_name;
						键：
							ADD {PRIMARY|UNIQUE|FOREIGN} key (col1, col2, ...)
							DROP {PRIMARY|UNIQUE|FOREIGN} KEY key_name

				删除：
					DROP TABLE [IF EXISTS] tbl_name [, tbl_name]

		索引管理：
			创建：
				CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name  ON tbl_name (index_col_name,...)

					index_col_name:
						col_name [(length)] [ASC | DESC]

			删除：
				DROP INDEX index_name ON tbl_name

			查看：
				SHOW {INDEX | INDEXES | KEYS} {FROM | IN} tbl_name [{FROM | IN} db_name] [WHERE expr]

		DML：INSERT， DELETE， UPDATE，SELECT

			INSERT INTO：
				INSERT  [INTO] tbl_name [(col_name,...)] {VALUES | VALUE} ({expr | DEFAULT},...),(...),...

			SELECT：
				(1) SELECT * FROM tbl_name;
				(2) SELECT col1, col2, ... FROM tbl_name;
					字段：column_name [AS Alias]
				(3) SELECT col1, col2, ... FROM tbl_name WHERE CLUASE;
					WHERE CLAUSE：过滤条件
						col_name 操作符 value|col_name；

							操作符：
								>, <, >=, <=, =, !=

							组合多个条件：
								and, or, not

							操作符(2)：
								BETWEEN ... AND ...
								LIKE 'PATTERN'：
									通配符：
										_：
										%:
								RLIKE 'PATTERN'
									正则表达式模式；
							IS NULL
							IS NOT NULL
				(4) SELECT col1, ... FROM tbl_name [WHERE CLAUSE] ORDER BY col1, col2, ... [ASC|DESC];

			DELETE：
				DELETE  FROM tbl_name [WHERE where_condition] [ORDER BY ...] [LIMIT row_count]

			UPDATE：
				UPDATE table_reference SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
					[WHERE where_condition]
					[ORDER BY ...]
					[LIMIT row_count]

		图形管理组件：
			phpMyAdmin
			Navicat
			MySQL-Front
			SQLyog
			ToadForMySQL






文件服务：
	vsftpd：应用层，文件共享；
	nfs：网络文件系统；
	samba：cifs协议在Linux主机上的实现，跨平台实现文件系统共享；

	网络存储：
		NAS：Network Attached Storage，文件服务器，nfs或cifs，文件级别共享接口；
		SAN：Storage Area NEtwork，存储区域网络，通过其它网络介质来传输SCSI协议，iSCSI(IP SAN), FC SAN, ...，块级别的共享接口；

	ftp：
		file transfer protocol, 21/tcp
			C/S：
				Client <--ftp-->Server
					Server：Listen
					Client: Connect

		连接：
			命令连接：传输命令；
			数据连接：传输数据；

			数据连接工作模式：
				主动模式：服务器端通过20/tcp主动连接客户端的命令连接的端口+1的端口；PORT；
				被动模式：客户端发出数据请求后，服务端会响应一个打开的临时随机端口给客户端；PASV；

			数据传输模式：
				文本格式
				二进制格式

			协议安全：
				明文：认证时传输账号和密码的传输亦是明文 ；

				安全增强：
					ftp over ssl/tls：ftps
					ftp over ssh：sftp

		C/S：
			S：Serv-U, IIS, ...
				开源解决方案：
					wuftpd：Washington University  ftp daemon
					vsftpd：very secure ftp daemon
					proftpd, pureftpd, ...
			C：
				GUI：flashfxp, cuteftp, filezilla, gftp, ...
				CLI：ftp, lftp, ...

		vsftpd：
			程序环境：
				配置文件：/etc/vsftpd/vsftpd.conf
				主程序：/usr/sbin/vsftpd
				Unit File：/usr/lib/systemd/system/vsftpd.service
				文件路径映射：/var/ftp
					ftp://ftp.magedu.com/pub/a.txt  --> /var/ftp/pub/a.txt
					用户的家目录的映射：访问ftp必须以某个系统用户的身份，此用户的家目录即文档目录；
					匿名用户:anonymous，要映射为一个系统用户，默认ftp；

			用户种类：
				匿名用户、系统用户、虚拟用户

		配置vsftpd：
			配置文件：vsftpd.conf
				directive value
				注意：directive之前不能有任何字符；

			匿名用户：
				anonymous_enable=YES
				anon_upload_enable=YES
				anon_mkdir_write_enable=YES
				anon_other_write_enable=YES


			系统用户：
				local_enable=YES
				write_enable=YES

				辅助认证配置文件/etc/vsftpd/ftpusers：
					pam认证的配置文件：/etc/pam.d/vsftpd

				chroot_local_users=YES
					禁锢所有的本地用户于自己的家目录中；但需要事先移除用户对家目录的写权限；

				chroot_list_enable=YES
				chroot_list_file=/etc/vsftpd/chroot_list
					禁锢指定的文件中的用户于自己的家目录中；但需要事先移除用户对家目录的写权限；

			数据传输日志：
				xferlog_std_format=YES
				xferlog_enable=YES
				xferlog_file=/var/log/xferlog

			控制可登录vsftpd服务的用户列表：
				userlist_enable=YES
					是否启用/etc/vsftpd/user_list文件来可登录的用户；
				userlist_deny={YES|NO}
					YES：黑名单
					NO：白名单

		虚拟用户：
			用户账号存储于何处？
				文件，MySQL，Redis, ...

			vsftpd的认证功能托管给pam：
				Pluggable Authencate Module，认证框架，认证库；
				通过模块完成认证功能：/usr/lib64/security/

			pam_mysql模块：
				# ./configure --with-pam=/usr --with-mysql=/usr --with-pam-mods-dir=/usr/lib64/security
				# make
				# make install

			准备数据库：
				mysql> CREATE DATABASE vsftpd;
				mysql> CREATE TABLE vsftpd.users (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name CHAR(30) NOT NULL UNIQUE KEY,password CHAR(48));
				mysql> INSERT INTO vsftpd.users (name,password) VALUES ('tom',PASSWORD('mageedu')),('jerry',PASSWORD('mageedu'));

				mysql> GRANT ALL ON vsftpd.* TO 'vsftpd'@'localhost' IDENTIFIED BY 'mageedu';
				mysql> GRANT ALL ON vsftpd.* TO 'vsftpd'@'127.0.0.1' IDENTIFIED BY 'mageedu';
				mysql> FLUSH PRIVILEGES;

			vsftpd通过pam_mysql进行认证的配置文件：/etc/pam.d/vsftpd.mysql
				auth required /usr/lib64/security/pam_mysql.so user=vsftpd passwd=mageedu host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2
				account required /usr/lib64/security/pam_mysql.so user=vsftpd passwd=mageedu host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2

				user：连接mysql服务器的用户名，此用户要有权限访问认证vsftpd服务的数据库；
				passwd：上面的用户的密码；
				host：mysql服务器主机地址；
				db：认证vsftpd服务的数据库名称；
				table：存放了用户和密码的表；
				usercolumn：用户名对应的字段；
				passwdcolumn：密码对应的字段；
				crypt：密码加密方法；

			准备匿名用户映射的系统用户账号：
				# mkdir /ftproot
				# useradd  -d /ftproot  vuser
				# mkdir /ftproot/{pub,upload}
				# setfacl -m u:vuser:rwx  /ftproot/upload

			配置vsftpd：vsftpd.conf
				pam_service_name=vsftpd.mysql
				guest_enable=YES
				guest_username=vuser

			配置每匿名用户有单独的权限设定
				vsftpd.conf，添加：
					user_config_dir=/etc/vsftpd/users_conf

				创建目录：
					# mkdir /etc/vsftpd/vusers_conf

				为每用户提供配置文件：
					/etc/vsftpd/vusers_conf/{tom,jerry}

					配置权限的指令：
						anon_upload_enable
						anon_mkdir_write_enable
						anon_other_write_enable

	练习：完成vsftpd配置
		(1) 禁锢系统用户于家目录；
		(2) 基于mysql进行用户认证；
		(3) 不同的虚拟用户拥有不同的权限设定；

博客作业：

回顾：ftp, vsftpd
	ftp：21/tcp, 20/tcp ;
		命令、数据；
		被动、主动；
	vsftpd：
		匿名、系统、虚拟（mysql）

samba：

	smb：Service Message Block；
	cifs：Common Internet File System

	samba：Andrew Tridgell；
		功能：
			文件系统共享；
			NetBIOS协议；
			打印服务；

		peer to peer（Work Group）
		domain devel
			LDAP：Lightweight Directory Access Protocol

	安装samba：


	程序环境：
		配置文件：
			/etc/samba/smb.conf
		主程序：
			nmbd：Network Naming Service， NetBIOS
			smbd：SMB/CIFS Service；
		Unit File：
			/usr/lib/systemd/system/nmb.service
			/usr/lib/systemd/system/smb.service
		监听的端口：
			137/udp, 138/udp
			139/tcp, 445/tcp
		客户端程序：
			mount -t cifs = mount.cifs
			smbclient：交互式命令行客户端工具；

		samba的配置：
			/etc/samba/smb.conf

				#======================= Global Settings =====================================
				# ----------------------- Network-Related Options -------------------------
				# --------------------------- Logging Options -----------------------------
				# ----------------------- Standalone Server Options ------------------------
				# ----------------------- Domain Members Options ------------------------
				# ----------------------- Domain Controller Options ------------------------
				# ----------------------- Browser Control Options ----------------------------
				#----------------------------- Name Resolution -------------------------------
				# --------------------------- Printing Options -----------------------------
				# --------------------------- File System Options ---------------------------
				#============================ Share Definitions ==============================

			两类配置段：
				全局配置：
					[global]
						workgroup = MYGROUP
						server string = Samba Server Version %v
						interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24  指明要监听的地址或网络接口；、
						hosts allow = 127. 192.168.12. 192.168.13.

						log file = /var/log/samba/log.%m
						max log size = 50

						security = user
							share (depricated)
							server (depricated)
							domain
						passdb backend = tdbsam

						load printers = yes
						cups options = raw

				共享文件系统：
					[shared_ID]

					有三类：
						[homes]：每个samba用户是否能够通过samba服务访问其家目录；
						[printers]：打印服务；
						[shared_FS]：用户自定义的共享目录；

					常用指令：
						comment：注释信息；
						path：本地文件系统路径；
						browseable：是否可浏览，是否为用户可见；
						guest ok：是否允许来宾账号访问；
						public：是否公开给所有来宾；
						writable：是否可写；
							read only = no
						write list：拥有写权限的用户或组列表；
							用户名
							@组名， +组名

			samba用户管理：
				smbpasswd, pdbedit
					smbpasswd [OPTIONS] USERNAME
						-a：添加
						-x：删除
						-d：禁用
						-e：启用
					pdbedit：
						-L：列出samba服务中的所有用户；
						-a：添加用户为samba用户；
							-u USERNAME：
						-x：删除
						-t：从标准输出接收密码；

			访问服务：
				（1） smbclient交互式客户端程序：
					(1) 查看目标服务上的共享
						smbclient -L SMB_SERVER [-U USERNAME]
					(2) 访问共享服务
						smbclient //SMB_SERVER[/SHARE_NAME] [-U USERNAME]

				（2）mount.cifs
					mount -t cifs //SMB_SERVER/SHARED_ID  /MOUNT_POINT  -o username=USER,password=PASS

					注意：挂载操作中的用户，与-o选项中指定的用户直接产生映射关系；访问挂载，是以-o选项指定的用户身份运行，与本地用户以ID产生映射；

		自定义共享的方式：
			[shared_ID]
				comment =
				path =
				guest ok =
				read only =
				public =
				browseable =
				write list =

			注意：定义所用户在服务级的写权限write = yes (read only = no）不建议与write list同时使用；

		smbstatus命令：
			显示samba服务的相关共享的访问状态信息；
				-b：显示简要格式信息；
				-v：显示详细格式信息；

	练习：
		(1) 创建一个共享mydata，路径为/mysql/data，客户端1挂载至/mydata；而后客户端1主机安装mysql或mariadb，将数据目录设定为/mydata，要确保mysql服务能正常 运行，但数据目录位于samba server上；
		(2) 客户端2主机使用类似客户端1主机的方式挂载mydata共享至本地的/mydata目录，而后，直接安装mysql或mariadb server，设定其数据目录为/mydata；测试
			(a) 客户端1 mysql服务运行时，客户端2的mysql服务能否启动？
			(b) 客户端1 mysql服务停止时，客户端2的mysql服务能否启动？

	练习： 创建一个共享ftp，路径为/var/ftp/pub；要求仅centos和gentoo用户能上传；此路径对其它用户不可见；

	练习：(1) samba sever共享/data/application/web，在目录中提供wordpress；
		   (2) 部署两台amp服务器，均挂载此共享作为某主机的文档映射路径；
		   (3) 验正两台主机上的wordpress是否可被同时访问；
			(a) 发一个文件，验正图片上传等功能；
			(b) 在任一客户端上访问此应用，多次刷新，确认下所有资源访问是否正常 ；

nfs：

	Network File System

	RPC：Remote Procedure Call

	NFS: sun, 协议；
		NFSv1
		NFSv2, NFSv3,

		NIS：Network Information Service

		nfsd：2049/tcp

		辅助类的服务：rpc (portmap)
			rpc.mountd：认证；
			rpc.lockd：加锁
			rpc.statd：状态

		nfs server:
			安装：内核模块nfsd
				用户空间的工具程序：nfs-utils
			Unit File：/usr/lib/systemd/system/nfs.service
			配置文件：/etc/exports, /etc/exports.d/*

		管理共享的nfs文件系统：配置文件每一行定义一个共享文件系统
			 Each line contains an export point and a whitespace-separated list of clients allowed to mount the file system at that point.

			 /PATH/TO/SOME_DIR   CLIENTS_1(export_options,...)  CLIENTS_2(export_options,...)
				CLIENTS：
					single host: IPv4, IPv6, FQDN
					IP networks：network/netmask，支持两种格式的掩码；
					wildcards：在主机名字符串中使用通，*.magedu.com，
					anonymous：*，表示所有的客户端主机；

				General Options
					ro：只读；
					rw：读写；
					sync：同步
					async：异步
				User ID Mapping：
					root_squash：压缩root用户的权限，默认行为；nfsnobody
					no_root_squash：不压缩root用户的权限；
					all_squash：压缩所有用户的权限;
					anonuid and anongid：将压缩的用户映射为此处指定的用户

		NFS Client：
			mount -t nfs NFS_SERVER:/PATH/TO/EXPORTED_DIR  /MOUNT_POINT  [-rvVwfnsh] [-o OPTIONS]

			showmount - show mount information for an NFS server
				-e or --exports
					Show the NFS server's export list.
				-d or --directories
					List only the directories mounted by some client.

			exportfs - maintain table of exported NFS file systems
				-a     Export or unexport all directories.
				-r	Reexport  all  directories, synchronizing /var/lib/nfs/etab with /etc/exports and files under /etc/exports.d.
				 -u     Unexport one or more directories.

		开机自动挂载：/etc/fstab文件中

	练习：
		(1) 创建一个共享mydata，路径为/mysql/data，客户端1挂载至/mydata；而后客户端1主机安装mysql或mariadb，将数据目录设定为/mydata，要确保mysql服务能正常 运行，但数据目录位于samba server上；
		(2) 客户端2主机使用类似客户端1主机的方式挂载mydata共享至本地的/mydata目录，而后，直接安装mysql或mariadb server，设定其数据目录为/mydata；测试
			(a) 客户端1 mysql服务运行时，客户端2的mysql服务能否启动？
			(b) 客户端1 mysql服务停止时，客户端2的mysql服务能否启动？

	练习：(1) samba sever共享/data/application/web，在目录中提供wordpress；
		   (2) 部署两台amp服务器，均挂载此共享作为某主机的文档映射路径；
		   (3) 验正两台主机上的wordpress是否可被同时访问；
			(a) 发一个文件，验正图片上传等功能；
			(b) 在任一客户端上访问此应用，多次刷新，确认下所有资源访问是否正常 ；


rsyslog：

	日志收集和存储系统；
		日志：历史事件记录；

	syslog：
		klogd：kernel
		syslogd：service(application)

		事件记录格式：
			日期时间 	主机		进程[pid]：事件内容

		C/S架构：服务，可监听于某套接字，帮其它主机记录日志信息；
			S：udp, tcp协议；

	rsyslog：
		rsyslog特性：
			多线程；
			UDP，TCP，SSL/TLS，RELP；
			存储日志信息于MySQL、PGSQL、Oracle等RDBMS；
			强大的过滤器，实现过滤日志信息中任何部分的内容；
			自定义的输出格式；

		elk stack：elasticsearch，logstash, kibana

	rsyslog中的术语：
		facility：设施、信道；
			auth, authpriv, cron, daemon, kern, lpr, mail, mark, news, security, user, uucp, syslog, local0-local7
		priority：
			debug, info, notice, warn(warning), err(error), crit(critical), alert, emerg(panic)

	程序包：rsyslog
		程序环境：
			配置文件：/etc/rsyslog.conf， /etc/rsyslog.d/
			主程序：/usr/sbin/rsyslogd
			模块路径：/usr/lib64/rsyslog/
			Unit File：/usr/lib/systemd/system/rsyslog.service

		配置文件：
			有三部分组成：严格按照配置段位置添加配置
				#### MODULES ####
				#### GLOBAL DIRECTIVES ####
				#### RULES ####

			RULES：
				facility.priority	target

				facility：
					*：所有的facility；
					f1,f2,f3,...：列表中给定的所有facility；
						auth,authpriv,security.info
					f1.p1;f2,p2;f3.p3;...：列表中给定的所有facility；
						auth.info;authpriv.notic;security,warn;

				priority：
					*：所有级别
					none：没有级别，不记录日志；
					PRIORITY：此级别（含）及其以上的所有级别；
					=PRIORITY：仅指定的级别；

				target：
					文件：将日志信息记录到指定的文件中；文件路径之前的“-”表示异步写入之意；
					用户：将日志事件通知给指定的用户；一般指登录到当前系统上的所有用户的终端；
					日志服务器：@rsyslog_server，把日志信息发往指定的日志服务器；
					管道：|COMMAND

		命令行客户端程序：
			logger - a shell command interface to the syslog(3) system log module
				logger [options] [message]

		配置rsyslog服务器：
			#### modules ####
			…………
			# Provides UDP syslog reception
			$ModLoad imudp
			$UDPServerRun 514

			# Provides TCP syslog reception
			$ModLoad imtcp
			$InputTCPServerRun 514

		其它几个日志文件：
			last, lastb - show listing of last logged in users
				-num, -n num

				/var/log/btmp：登录当前系统的所有的失败的尝试；
				/var/log/wtmp：所有成功登录至当前系统的相关信息；

			lastlog - reports the most recent login of all users or of a given user


			/var/log/dmesg：系统引导过程中的日志信息；
				文本查看工具；
				也可以使用dmesg命令；

	rsyslog记录日志于mysql：
		前提：准备好msql server或mariadb server；
		(1) 安装rsyslog连接至mysql server的驱动模块；
			# yum install rsyslog-mysql
		(2) 在mysql server准备rsyslog专用的用户账号；
			 GRANT ALL ON Syslog.* TO 'rsyslog'@'127.0.0.1' IDENTIFIED BY 'rsyslogpass';
			 GRANT ALL ON Syslog.* TO 'rsyslog'@'local' IDENTIFIED BY 'rsyslogpass';
		(3) 生成所需要的数据库和表；
			mysql -ursyslog -h127.0.0.1 -prsyslogpass <  /usr/share/doc/rsyslog-7.4.7/mysql-createDB.sql
		(4) 配置rsyslog使用ommysql模块
			#### MODULES ####
			......
			$ModLoad ommysql
		(5) 配置RULES，将所期望的日志信息记录于mysql中；
			facility.priority 		:ommysql:DBHOST,DB,DBUSER,DBUSERPASS
		(6) 重启rsyslog服务；

		(7) loganalyzer
			WebGUI, 运行amp环境中；
				(a) 准备amp环境
					# yum install httpd php php-mysql php-gd
					# systemctl start httpd.service
				(b) 安装loganalyzer
					# tar xf loganalyzer-VERSION.tar.gz
					# cd loganalyzer-VERSION
					# cp -a src  /var/www/html/loganalyzer-VERSION
					# cd /var/www/html
					# ln -sv loganalyzer-VERSION log
					# cd log
					# touch config.php
					# chmod 666 config.php

					打开浏览器，配置；
						MySQL Native, Syslog Field
						Table Type："Monitorware“

					# chmod 644 config.php

	博客作业：rsyslog+mysql+loganalyzer


iptables(1)

	Firewall：隔离工具；Packets Filter Firewall；工作于主机或网络的边缘，对经由的报文根据预先定义的规则（匹配条件）进行检测，对于能够被规则匹配到的报文实行某预定义的处理机制的一套组件；
		硬件防火墙：在硬件级别实现部分功能的防火墙；另一个部分功能基于软件实现；
		软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙；

		主机防火墙：服务范围为当前主机；
		网络防火墙：服务范围为防火墙被的局域网；

	iptables/netfilter：
		netfilter：防火墙框架，framework；位于内核空间；
		iptables：命令行工具程序，位于用户空间；规则管理工具；

		netfilter：
			hooks function
				prerouting
				input
				forward
				output
				postrouting

		iptables：
			CHAINS：
				PREROUTING
				INPUT
				FORWARD
				OUTPUT
				POSTROUTING

			报文流向：
				到本机某进程的报文：PREROUTING --> INPUT
				由本机转发的报文：PREROUTING --> FORWARD --> POSTROUTING
				由本机的某进程发出报文：OUTPUT --> POSTROUTING

		tables：
			filter：过滤，防火墙；
			nat：network address translation，网络地址转换；
			mangle：拆解报文，做出修改，并重新封装；
			raw：关闭nat表上启用的连接追踪机制；

			优先级次序（由高而低）：
				raw --> mangle --> nat --> filter

			功能<-->钩子：
				raw：PREROUTING，OUTPUT
				mangle：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING
				nat：PREROUTING，INPUT，OUTPUT，POSTROUTING
				filter：INPUT，FORWARD，OUTPUT

		iptables规则的组成部分：
			匹配条件：
				网络层首部：Source IP, Destination IP
				传输层首部：Source Port, Destination Port
				扩展检查机制：
			处理动作：target
				ACCEPT，DROP，REJECT

	安装：
		netfilter：位于内核中的tcp/ip协议栈报文处理框架；
		iptables：
			CentOS 5/6：iptables命令编写规则；
				# iptables -t filter -F
				# service iptables save
			CentOS 7：firewalld，firewall-cmd, firewall-config
				# systemctl disable firewalld

			程序包：iptables， iptstate

		iptables命令：

			规则：根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理；
				匹配条件：
					基本匹配条件：源地址，目标地址，传输层协议
					扩展匹配条件：需要借助于扩展模块进行指定的匹配条件
						隐式扩展：已经在基本匹配条件中指明的协议相关的扩展；
						显式扩展：隐式扩展之外的其它扩展匹配条件；
				处理动作：
					基本动作：ACCEPT，DROP，...
					扩展动作：需要借助于扩展模块进行，但无须显式指定，仅需指明动作；

			添加规则时需要考量的问题：
				(1) 报文流经的位置：用于判断将规则添加至哪个链；
				(2) 实现的功能：用于判断将规则添加至哪个表；
				(3) 报文的方向：用于判断哪个为“源”，哪个为“目标”；
				(4) 匹配条件：用于编写能够正确匹配目标报文的规则；

	iptabls命令的使用格式：
		iptables [-t table] {-A|-C|-D} chain rule-specification

		iptables [-t table] -I chain [rulenum] rule-specification

		iptables [-t table] -R chain rulenum rule-specification

		iptables [-t table] -D chain rulenum

		iptables [-t table] -S [chain [rulenum]]

		iptables [-t table] {-F|-L|-Z} [chain [rulenum]] [options...]

		iptables [-t table] -N chain

		iptables [-t table] -X [chain]

		iptables [-t table] -P chain target

		iptables [-t table] -E old-chain-name new-chain-name

			rule-specification = [matches...] [target]

			match = -m matchname [per-match-options]
			target = -j targetname [per-target-options]

		规则管理格式：iptables [-t able] COMMAND chain cretieria [-m -m matchname [per-match-options]]  [-j targetname [per-target-options]]

		-t table：指明要管理的表； 默认为filter；

		COMMANDS：
			链管理：
				-P：iptables [-t table] -P chain target，定义链的默认策略；其target一般可使用ACCEPT或DROP；
				-N：iptables [-t table] -N chain，自定义规则链；仅在默认链通过某规则进行调用方可生效；因此，每个自定义链都有其引用记数；
				-X：iptables [-t table] -X [chain]，删除自定义的空的引用计数为0的链；
				-F：iptables [-t table] -F [chain [rulenum]] [options...]，清空指定的链，或删除指定链上的规则 ；
				-E：iptables [-t table] -E old-chain-name new-chain-name，重命名自定义的引用计数为0的链；
				-Z：iptables [-t table] -Z  [chain [rulenum]] [options...]
			规则：
				-A：append, iptables [-t table] -A chain rule-specification，追加规则到指定的链尾部；
				-I：insert, iptables [-t table] -I chain [rulenum] rule-specification，插入规则到指定的链中的指定位置，默认为链首；
				-D：delete，iptables [-t table] -D chain rule-specification或iptables [-t table] -D chain rulenum，删除指定的链上的指定规则；
				-R：replace，iptables [-t table] -R chain rulenum rule-specification，将指定的链上的指定规则替换为新的规则；
			查看：
				-L：list, iptables [-t table] -L [chain [rulenum]] [options...]
					-n：数字格式；
					-v：verbose，详细格式信息；
						-vv, -vvv
					--line-numbers：显示链上的规则的编号；
					-x：exactly，显示计数器的精确值；

			计数器：
				每条规则以及链的默认策略分别有各自的两个计数器：
					(1) 匹配到的报文的个数：pkts
					(2) 匹配到的所有报文的大小之积：bytes

回顾：
	iptables/netfilter
		四表：raw, mangle, nat, filter
		五链：PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING

	iptables命令：
		iptables [-t able] COMMAND chain cretieria [-m -m matchname [per-match-options]]  [-j targetname [per-target-options]]
			COMMANDS：
				链管理：-P，-N，-X，-E，-F，-Z
				规则管理：-A，-I，-D，-R
				查看：-L，-n, -x, -v, --line-numbers

iptables（2）

	iptables [-t able] COMMAND chain cretieria [-m -m matchname [per-match-options]]  [-j targetname [per-target-options]]

		匹配条件：
			基本匹配条件
			扩展匹配条件
				隐式扩展
				显式扩展

			注意：多重条件之间的隐含逻辑为“与”操作；

			基本匹配条件：
				[!] -s, --source address[/mask][,...]：检查报文中的源IP地址是否符合此处指定的地址或地址范围；
				[!] -d, --destination address[/mask][,...]：检查报文中的目标IP地址是否符合此处指定的地址或地址范围；
				[!] -p, --protocol protocol：检查报文中传输层的协议类型，支持tcp, udp,  udplite, icmp,  icmpv6,esp,  ah, sctp, mh，或者 "all"；
				[!] -i, --in-interface name：检查报文进入本机时的接口是否符合本处指定的接口；INPUT, FORWARD  and  PREROUTING ；
				[!] -o, --out-interface name：检查报文即将离开本机时经由的接口是否符合本处指定的接口；FORWARD, OUTPUT and POSTROUTING；

				 -m, --match match：显式指明要使用的扩展模块；
				 -j, --jump target：跳转目标；

			扩展匹配条件：
				隐式扩展：不用-m选项明确给出要使用的扩展机制的扩展；此处主要指使用-p {tcp|udp|icmp}给定协议后可直接对给定的协议所进行的扩展；
					-p tcp：可直接使用tcp协议对应的扩展选项；
						[!] --source-port,--sport port[:port]：匹配报文中的传输层的源端口；可给出多个连接的端口；
						[!] --destination-port,--dport port[:port]：匹配报文中的传输层的目标端口；可给出多个连接的端口；
						[!] --tcp-flags mask comp
							SYN，ACK，FIN，RST，URG，PSH；

							mask：要检查的标志位列表，以逗号分隔，例如SYN,ACK,FIN,RST
							comp：mask给定的众标志位中，其值必须为1的标志位列表，余下的必须为0；

								--tcp-flags SYN,ACK,FIN,RST SYN

						[!] --syn：相当于--tcp-flags SYN,ACK,FIN,RST SYN

					-p udp：可直接使用udp协议对应的扩展选项；
						[!] --source-port,--sport port[:port]：匹配报文中的传输层的源端口；可给出多个连接的端口；
						[!] --destination-port,--dport port[:port]：匹配报文中的传输层的目标端口；可给出多个连接的端口；

					-p icmp：可直接使用icmp协议对应的扩展选项；
						[!] --icmp-type {type[/code]|typename}
							--icmp-type  0/0：匹配对ping请求的响应报文
							--icmp-type 8/0：匹配ping请求报文

				显式扩展：必须使用-m选项给出matchname的扩展，而且有些扩展都还存在专用选项；

					1、multiport
						以离散或连续的方式定义的多端口匹配条件； Up  to 15 ports can be specified.

						[!] --source-ports,--sports port[,port|,port:port]...：指定多个源端口；
						[!] --destination-ports,--dports port[,port|,port:port]...：指定多个目标端口；
						[!] --ports port[,port|,port:port]...：匹配此处指定的源或目标端口；

					2、iprange
						以连续的ip地址范围指明多地址匹配条件；

						[!] --src-range from[-to]
						[!] --dst-range from[-to]

					3、string
						对报文中的应用层数据做字符串匹配检测；

						[!] --string pattern
						[!] --hex-string pattern
						--algo {bm|kmp}：字符串匹配检查算法；
						--from offset
						--to offset

					4、time
						根据报文到达的时间与指定的时间范围进行匹配度检测；

						 --datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]
						 --datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]

						 --timestart hh:mm[:ss]
						 --timestop hh:mm[:ss]

						 [!] --monthdays day[,day...]

						 [!] --weekdays day[,day...]

					5、connlimit
						根据每客户端IP做并发连接数限制，即限制单IP可同时发起连接请求；

						--connlimit-upto n：连接数小于等于阈值；
						--connlimit-above n：连接数超出阈值；

						~]# iptables -I INPUT -d 10.1.0.6 -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT

					6、limit
						基于收发报文的速率进行匹配；

						--limit rate[/second|/minute|/hour|/day]
						--limit-burst number

						 ~]# iptables -A INPUT -d 10.1.0.6 -p icmp --icmp-type 8 -m limit --limit-burst 3 --limit 20/minute -j ACCEPT

					7、state
						状态检测：连接追踪机制（conntrack）

							NEW：新连接
							ESTABLISHED：已建立的连接
							RELATED：相关联的连接
							INVALID：无法识别的连接
							UNTRACKED：未被追踪连接；

						相关的内核模块：
							nf_conntrack
							nf_conntrack_ipv4
							nf_conntrack_ftp

							追踪到的连接：/proc/net/nf_conntrack文件中；

							能追踪的最大连接数量定义在：/proc/sys/net/nf_conntrack_max
								建议调整至足够大；

							不同的协议的连接追踪时长：
								/proc/sys/net/netfilter/

						[!] --state state

						如何开放被动模式的ftp服务：
							(1) 装载追踪ftp协议的模块；
								# modprobe nf_conntrack_ftp

							(2) 放行入站命令连接
								# iptables -A INPUT -d SERVER_IP -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT

							(3) 放行入站数据连接
								# iptables -A INPUT -d SERVER_IP -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT

							(4) 放行出站的ESTABLISHED连接
								# iptabls -A OUTPUT -s SERVER_IP -m state --state ESTABLISHED -j ACCEPT

		处理动作（跳转目标）：
			-j tagetname [per-target-options]
				简单target：
					ACCEPT，DROP

				扩展target：
					REJECT：
						--reject-with type
							 icmp-net-unreachable, icmp-host-unreachable, icmp-port-unreachable, icmp-proto-unreach‐able, icmp-net-prohibited, icmp-host-prohibited, or icmp-admin-prohibited，默认为icmp-port-unreachable；
					LOG：
						Turn  on  kernel  logging of matching packets.

						--log-level level
						--log-prefix prefix：日志信息的前导信息；


	保存和载入规则：
		保存：iptables-save > /PATH/TO/SOME_RULE_FILE
		重载：iptables-restore < /PATH/FROM/SOME_RULE_FILE
			-n, --noflush：不清除原有规则
			-t, --test：仅分析生成规则集，但不予提交；

			注意：重载文件中的规则，会清除已有规则；

		CentOS 6：
			保存规则：service  iptables  save
				保存规则于/etc/sysconfig/iptables，保存操作会清除文件中原有的内容；
			重载规则：server iptables restart
				默认重载/etc/sysconfig/iptables文件中的规则

			脚本配置文件：/etc/sysconfig/iptables-config
				用于指明要装载的模块；

		CentOS 7开机自动生效规则：
			(1) firewalld服务；
			(2) shell脚本，直接记录iptables命令；
			(3) 自定义unit file或init script；

	规则优化的思路：
		(1) 优先放行双方向状态为ESTABLISHED的报文；
		(2) 服务于不同类别的功能的规则，匹配到报文可能性更大的放前面；
		(3) 服务于同一类别的功能的规则，匹配条件较为严格的放前面；
		(4) 设置默认策略：白名单机制
			(a) 可使用iptables -P设定默认策略；
			(b) 建议在规则链的最后定义规则做为默认策略；

	练习：基于状态放行telnet, ftp, ssh, http, samba, icmp等服务；
		(1) 对本机的ping请求每分钟不得超出20个；
		(2) 每客户端对本机的ssh的并发连接数不得超过3个；
		(3) 本机的telnet服务仅允许工作时间内访问；

回顾：
	隐式扩展：
		-p tcp
			--dport, --sport, --tcp-flags, --syn
		-p udp
			--dport, --sport
		-p icmp
			--icmp-type {8|0}
	显式扩展：
		-m matchname [per-match-options]
			multiport
			iprange
			string
			time
			connlimit
			limit
			state：
				NEW，ESTABLISHED，RELATED，UNTRACKED，INVALID
	保存和载入规则：
		iptables-save
		iptables-restore

	-j target：
		ACCEPT，DROP
		REJECT，LOG

iptables/netfilter(3)

	iptables/netfilter网络防火墙：
		添加规则于FORWARD链，注意几个问题：
			(1) 请求和响应报文均会经由FORWARD链，要注意规则的方向性；
				第一条：iptables -I FORWARD  -m state --state ESTABLISHED,RELATED -j ACCEPT
			(2) 如果可以启用conntrack机制，注意网关主机所能够追踪的连接数的最大数量要符合需要

		NAT：
			源地址转换：SNAT，POSTROUTING
				静态转换：
				动态转换：
			目标地址转换：DNAT，PREROUTING

		PAT：Port Address Translation

		SNAT：
			This  target  is only valid in the nat table, in the POSTROUTING and INPUT chains, and user-defined chains which are only called from those chains.

			--to-source [ipaddr[-ipaddr]]

		MASQUERADE：
			This target is only valid in the nat table, in the POSTROUTING chain.  It  should  only  be  used  with  dynamically assigned  IP (dialup) connections: if you have a static IP address, you should use the SNAT target.

		DNAT:
			This target is only valid in the nat table, in the PREROUTING and OUTPUT chains, and user-defined chains  which  are only  called from those chains.

			--to-destination [ipaddr[-ipaddr]][:port[-port]]

		REDIRECT:
			This  target  is only valid in the nat table, in the PREROUTING and OUTPUT chains, and user-defined chains which are only called from those chains.

			--to-ports port[-port]

		RETURN：返回


	自定义链：


	练习：INPUT和OUTPUT默认策略为DROP；

		1、限制本地主机的web服务器在周一不允许访问；新请求的速率不能超过100个每秒；web服务器包含了admin字符串的页面不允许访问；web服务器仅允许响应报文离开本机；
		2、在工作时间，即周一到周五的8:30-18:00，开放本机的ftp服务给172.16.0.0网络中的主机访问；数据下载请求的次数每分钟不得超过5个；
		3、开放本机的ssh服务给172.16.x.1-172.18.x.100中的主机，x为你的学号，新请求建立的速率一分钟不得超过2个；仅允许响应报文通过其服务端口离开本机；
		4、拒绝TCP标志位全部为1及全部为0的报文访问本机；
		5、允许本机ping别的主机；但不开放别的主机ping本机；


	练习：判断下述规则的意义：
		# iptables -N clean_in
		# iptables -A clean_in -d 255.255.255.255 -p icmp -j DROP
		# iptables -A clean_in -d 172.16.255.255 -p icmp -j DROP

		# iptables -A clean_in -p tcp ! --syn -m state --state NEW -j DROP
		# iptables -A clean_in -p tcp --tcp-flags ALL ALL -j DROP
		# iptables -A clean_in -p tcp --tcp-flags ALL NONE -j DROP
		# iptables -A clean_in -d 172.16.100.7 -j RETURN


		# iptables -A INPUT -d 172.16.100.7 -j clean_in

		# iptables -A INPUT  -i lo -j ACCEPT
		# iptables -A OUTPUT -o lo -j ACCEPT


		# iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 53,113,135,137,139,445 -j DROP
		# iptables -A INPUT  -i eth0 -m multiport -p udp --dports 53,113,135,137,139,445 -j DROP
		# iptables -A INPUT  -i eth0 -p udp --dport 1026 -j DROP
		# iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 1433,4899 -j DROP

		# iptables -A INPUT  -p icmp -m limit --limit 10/second -j ACCEPT



	补充：利用iptables的recent模块来抵御DOS攻击: 22，建立一个列表，保存有所有访问过指定的服务的客户端IP


		ssh: 远程连接，

		iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 3 -j DROP


		iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH
		iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j LOG --log-prefix "SSH Attach: "
		iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j DROP

		1.利用connlimit模块将单IP的并发设置为3；会误杀使用NAT上网的用户，可以根据实际情况增大该值；

		2.利用recent和state模块限制单IP在300s内只能与本机建立2个新连接。被限制五分钟后即可恢复访问。

		下面对最后两句做一个说明：

		1.第二句是记录访问tcp 22端口的新连接，记录名称为SSH
		--set 记录数据包的来源IP，如果IP已经存在将更新已经存在的条目

		2.第三句是指SSH记录中的IP，300s内发起超过3次连接则拒绝此IP的连接。
		--update 是指每次建立连接都更新列表；
		--seconds必须与--rcheck或者--update同时使用
		--hitcount必须与--rcheck或者--update同时使用

		3.iptables的记录：/proc/net/xt_recent/SSH


		也可以使用下面的这句记录日志：
		iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --name SSH --second 300 --hitcount 3 -j LOG --log-prefix "SSH Attack"


	CentOS 6：

		http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/

		layer7：第三方扩展；

		iptables实现七层访问过滤：

			模块：layer7
				识别应用层协议

			iptables/netfilter
				iptables -m state,
				netfilter state

			对内核中的netfilter，打补丁layer7，重新编译内核
			对iptables打补丁，补上layer7模块，重新iptables


		diff/patch：文本操作工具


			diff是Unix系统的一个很重要的工具程序。它用来比较两个文本文件的差异，是代码版本管理的核心工具之一。其用法非常简单：
			　　# diff <变动前的文件> <变动后的文件>

			由于历史原因，diff有三种格式：
			　　* 正常格式（normal diff）
			　　* 上下文格式（context diff）
			　　* 合并格式（unified diff）

			1、正常格式的diff
				例如，对file1（变动前的文件）和file2（变动后的文件）进行比较可使用如下命令：
			　　 	# diff file1 file2
				显示结果中，第一行是一个提示，用来说明变动位置。它分成三个部分：前面的数字，表示file1的第n行有变化；中间的"c"表示变动的模式是内容改变（change），其他模式还有"增加"（a，代表addition）和"删除"（d，代表deletion）；

			2、上下文格式的diff
				上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff。它的使用方法是加入-c选项（即context）。
			　　 	# diff -c f1 f2
				结果分成四个部分。第一部分的两行，显示两个文件的基本情况：文件名和时间信息，"***"表示变动前的文件，"---"表示变动后的文件。第二部分是15个星号，将文件的基本情况与变动内容分割开。第三部分显示变动前的文件，即file1。
				另外，文件内容的每一行最前面，还有一个标记位。如果为空，表示该行无变化；如果是感叹号（!），表示该行有改动；如果是减号（-），表示该行被删除；如果是加号（+），表示该行为新增。
				第四部分显示变动后的文件，即file2。

			3、合并格式的diff
				如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了"合并格式"的diff，将f1和f2的上下文合并在一起显示。
				它的使用方法是加入u参数（代表unified）。
			　　# diff -u f1 f2
				其结果的第一部分，也是文件的基本信息。"---"表示变动前的文件，"+++"表示变动后的文件。第二部分，变动的位置用两个@作为起首和结束。第三部分是变动的具体内容。
				除了有变动的那些行以外，也是上下文各显示3行。它将两个文件的上下文，合并显示在一起，所以叫做"合并格式"。每一行最前面的标志位，空表示无变动，减号表示第一个文件删除的行，加号表示第二个文件新增的行。

			diff
				-u

			patch

			尽管并没有指定patch和diff的关系，但通常patch都使用diff的结果来完成打补丁的工作，这和patch本身支持多种diff输出文件格式有很大关系。patch通过读入patch命令文件（可以从标准输入），对目标文件进行修改。通常先用diff命令比较新老版本，patch命令文件则采用diff的输出文件，从而保持原版本与新版本一致。

			patch的标准格式为
				patch [options] [originalfile] [patchfile]

			如果patchfile为空则从标准输入读取patchfile内容；如果originalfile也为空，则从patchfile（肯定来自标准输入）中读取需要打补丁的文件名。因此，如果需要修改的是目录，一般都必须在patchfile中记录目录下的各个文件名。绝大多数情况下，patch都用以下这种简单的方式使用：


			patch命令可以忽略文件中的冗余信息，从中取出diff的格式以及所需要patch的文件名，文件名按照diff参数中的"源文件"、"目标文件"以及冗余信息中的"Index："行中所指定的文件的顺序来决定。

			-p参数决定了是否使用读出的源文件名的前缀目录信息，不提供-p参数，则忽略所有目录信息，-p0（或者-p 0）表示使用全部的路径信息，-p1将忽略第一个"/"以前的目录，依此类推。如/usr/src/linux-2.4.15/Makefile这样的文件名，在提供-p3参数时将使用linux-2.4.15/Makefile作为所要patch的文件。

				patch
					-p
					-R

		mockbuild

			总结：操作步骤

			1、获取并编译内核

			# useradd mockbuild
			# rpm -ivh kernel-2.6.32-431.5.1.x86_64.el6.src.rpm
			# cd rpmbuild/SOURCES
			# tar linux-2.6.32-*.tar.gz -C /usr/src
			# cd /usr/src
			# ln -sv

			2、给内核打补丁
			# tar xf netfilter-layer7-v2.23.tar.bz2
			# cd /usr/src/linux
			# patch -p1 < /root/netfilter-layer7-v2.23/kernel-2.6.32-layer7-2.23.patch
			# cp /boot/config-*  .config
			# make menuconfig

		按如下步骤启用layer7模块
			Networking support → Networking Options →Network packet filtering framework → Core Netfilter Configuration
			<M>  “layer7” match support

			3、编译并安装内核
			# make
			# make modules_install
			# make install

			4、重启系统，启用新内核

			5、编译iptables

			# tar xf iptables-1.4.20.tar.gz
			# cp /root/netfilter-layer7-v2.23/iptables-1.4.3forward-for-kernel-2.6.20forward/* /root/iptables-1.4.20/extensions/
			# cp /etc/rc.d/init.d/iptales /root
			# cp /etc/sysconfig/iptables-config /root
			# rpm -e iptables iptables-ipv6 --nodeps
			# ./configure  --prefix=/usr  --with-ksource=/usr/src/linux
			# make && make install

			# cp /root/iptables /etc/rc.d/init.d
			# cp /root/iptables-config /etc/sysconfig

			6、为layer7模块提供其所识别的协议的特征码

			# tar zxvf l7-protocols-2009-05-28.tar.gz
			# cd l7-protocols-2009-05-28
			# make install

			7、如何使用layer7模块

			ACCT的功能已经可以在内核参数中按需启用或禁用。此参数需要装载nf_conntrack模块后方能生效。
			net.netfilter.nf_conntrack_acct = 1



			l7-filter uses the standard iptables extension syntax
			# iptables [specify table & chain] -m layer7 --l7proto [protocol name] -j [action]


			# iptables -A FORWARD -m layer7 --l7proto qq -j REJECT



			编译内核：
			make menuconfig
			make -j #
			make modules_install
			make install

			清理内核源码树：

			提示：xt_layer7.ko依赖于nf_conntrack.ko模块

	博客：前述iptables的所有应用
































































































`