标准I/O和管道
	标准的输入输出
		程序有指令加数据组成
		fd：file descriptor ( 文件描述符)
		程序的数据流有3种：						   fd
			输入的数据流：标准输入（stdin） 键盘   0
			输出的数据流：标准输出（stdout）显示器 1
			错误的数据流：错误输出（stderr）显示器 2

	输出重定向
		> 以覆盖的方式进行输出
		# ls > /dev/pts/0

		# ls > /testdir/ls.log

		>>以追加的方式进行输出

	标准错误重定向 2>
	# ls /boot /dd > /testdir/f1 2> /testdir/f2
		把输出数据流定向到一个文件，错误数据流定向到另一个文件

	合并标准输出和错误输出为同一个数据流进行重定向
		&>：覆盖重定向
		&>>：追加重定向
	# ls /boot /dd &> /testdir/f1
	# ls /boot /dd > /testdir/f2 2>&1
		把输出数据流和错误数据流都放到同一文件的2种方式
		2>&1 把2(错误流)重定向到1(输出流)

	多条命令一行用分号隔开重定向到一个文件中，前面的命令要用括号括起来
		# (pwd;ls /dd) &> /testdir/f1

	用重定向可以把多个文件内容复制到1个文件中，完成多个文件数据组合
		# cat /testdir/f1 /testdir/f2 > f3

	输入重定向
		<  覆盖重定向
		<< 追加重定向
		# cat << EOF >file
		批量处理多行（cat默认是处理一行的）；当遇到EOF处理符时退出

tr：转换和删除字符
	tr [OPTION]... SET1 [SET2]
		-c 或——complerment ：不符合SET1中的字符，全部用SET2中字符表示
		-d 或——delete ：SET1中出现的字符，输出时都不出现
		-s 或—squeeze-repeats ：把连续重复的字符以一个字符表示，减少重复次数
		-t 或--truncate-set1 ：SET1中字符一对一的对应SET2中字符
	# tr -d '\n' < f1  //去掉f1文件中的换行
	# tr -d [[:space:]] < f2  //去掉f2文件中的空格
	# tr -c 'ab' 'x' < f2  //把f2文件中不是ab的字符用x代替
	# tr ‘a-z’ ‘A-Z’< /etc/issue //把/etc/issue中所有小写字母换成大写字母


set-C：关闭重定向中的覆盖功能 > 	只对当前终端有效
	用于写脚本中防止命令对文件的胡乱覆盖，在脚本开始前关闭该功能
	set+C：取消该上述功能

pipe：管道
	命令1 | 命令2 | 命令3 | ...
	将前一个命令的输出作为后一个命令的输入
	# ls | tr 'a-z' 'A-Z'

	组合多种工具的功能
	只能传输正确的信息，要传输错误的信息要把标准标准错误重定向（2>&1）或者使用 |&
	# ls /etsss |& tr -d 'a-h'
	# ls /etsss 2>&1 | tr -d 'a-h'

tee：命令
	# 命令1 | tee 文件名 | 命令2
	可以保存一份数据流，还可以在重定向中或管道中在传输一份数据流，把数据一分为二
	保存不同阶段的输出
	复杂管道的故障排除
	# pwd | tee f3 | tr 'a-z' 'A-Z'

/dev/null：特殊设备，也叫“黑洞”，写进词设备的内容都会永远丢失
	echo “hello” | passwd --stdin gao > /dev/null
		直接从echo命令接受用户密码，并且把修改密码过程中的文件送进“黑洞”文件

1.file1 文件的内容为："1 2 3 4 5 6 7 8 9 10" 计算出所有数字的总和
	# cat file | tr ' ' '+' | bc
	
2.删除Windows文本文件中的'^M'字符
	# cat f5.txt | tr -d '\r' > f7

3.处理字符串“xt.,l 1 jr#!$mn 2 c*/fe 3 uz 4 ”，只保留其中的数字和空格
	# echo "xt.,l 1 jr#xmn 2 c*/fe 3 uz 4" | tr -c '[0-9][[:space:]]' 'x' | tr -d x

4.将PATH变量每个目录显示在独立的一行
	# echo "$PATH" | tr -t ':' '\n'

5.删除指定文件的空行
	# cat f11 | tr -s '\n'

6.将文件中每个单词（字母）显示在独立的一行，并无空行
	# cat f12 | tr -t ' ' '\n' | tr -s '\n'







